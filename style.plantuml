@startuml

!ifndef $FONTNAME
  !$FONTNAME = "Verdana"
!endif

!ifndef $FONTSIZE
  !$FONTSIZE = 14
!endif

!if ($DARK == 1)
  !$ACCENT = "ca0041"
  !$ACCENTDARK = "1b1b1b"
  skinparam stereotypeCBackgroundColor $ACCENT
  !$PRIMARY = "fff"
  !$SECONDARY = "aaa"
  !$ARROWCOLOR = "fff"
  !$ARROWFONTCOLOR = "bbb"
  !$BORDERCOLOR = "1b1b1b"
  !$BOXBG = "2e2e2e"
  skinparam backgroundColor 777
!endif

!if ($LIGHT == 1)
  !$ACCENT = "b1dbff"
  !$ACCENTDARK = "81a1bd"
  skinparam stereotypeCBackgroundColor $ACCENT
  !$PRIMARY = "000"
  !$SECONDARY = "333"
  !$ARROWCOLOR = "000"
  !$ARROWFONTCOLOR = "333"
  !$BORDERCOLOR = "aaa"
  !$BOXBG = "fff"
  skinparam backgroundColor eee
!endif

!procedure fontStyle()
  fontColor $PRIMARY
  fontName $FONTNAME
  fontSize $FONTSIZE
  stereotypeFontColor $SECONDARY
  stereotypeFontSize $FONTSIZE
!endprocedure

!procedure basicStyle()
  backgroundColor $BOXBG
  borderColor $BORDERCOLOR
!endprocedure

!procedure accentStyle()
  backgroundColor $ACCENT
  borderColor $ACCENTDARK
!endprocedure

!procedure arrowStyle()
  arrowColor $ARROWCOLOR
  arrowFontName $FONTNAME
  arrowFontColor $ARROWFONTCOLOR
  arrowFontSize $FONTSIZE
!endprocedure

' Class diagrams
skinparam roundcorner 10
skinparam BoxPadding 20

skinparam circledCharacter {
  radius 8
  fontSize $FONTSIZE
  fontName $FONTNAME
}

skinparam class {
  basicStyle()
  fontStyle()
  arrowStyle()
  attributeFontColor $SECONDARY
  attributeFontSize $FONTSIZE
  attributeIconSize $FONTSIZE
}

' Sequence diagrams

skinparam actor {
  accentStyle()
  fontStyle()
}

skinparam participant {
  basicStyle()
  fontStyle()
}

' Component diagrams

skinparam interface {
  accentStyle()
  fontStyle()
}

skinparam component {
  basicStyle()
  fontStyle()
}

skinparam node {
  basicStyle()
  fontStyle()
}

skinparam database {
  basicStyle()
  fontStyle()
}

skinparam queue {
  basicStyle()
  fontStyle()
}

' Use Case diagrams

skinparam usecase {
  basicStyle()
  fontStyle()
  arrowStyle()
}

skinparam activity {
  basicStyle()
  fontStyle()
  arrowStyle()
}

skinparam sequence {
  fontStyle()
  arrowStyle()

  lifeLineBorderColor $ARROWCOLOR
  lifeLineBackgroundColor $ARROWFONTCOLOR
}

skinparam boundary {
  accentStyle()
  fontStyle()
}

skinparam control {
  accentStyle()
  fontStyle()
}

skinparam entity {
  accentStyle()
  fontStyle()
}

' State diagrams

skinparam state {
  basicStyle()
  fontStyle()
  arrowStyle()
  startColor $ACCENT
  endColor $ACCENTDARK
}

' Object diagrams

skinparam object {
  basicStyle()
  fontStyle()
  arrowStyle()
  attributeFontColor $SECONDARY
  attributeFontSize $FONTSIZE
  attributeIconSize $FONTSIZE
}

' Common

skinparam note {
  accentStyle()
  fontStyle()
}

skinparam cloud {
  basicStyle()
  fontStyle()
  arrowStyle()
}

skinparam rectangle {
  basicStyle()
  fontStyle()
}

skinparam storage {
  basicStyle()
  fontStyle()
}
@enduml
